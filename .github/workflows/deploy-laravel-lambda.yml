name: Deploy to AWS ECR (Laravel → Lambda)

on:
  push:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      run_migrations:
        description: "Run php artisan migrate --force via Artisan Lambda"
        type: boolean
        default: false

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # (Optional) If you build assets with Node (Vite/Mix), keep these three steps.
      # Otherwise, remove them.
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Cache Node.js dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install frontend dependencies (optional)
        run: |
          if [ -f package.json ]; then
            npm ci
            # npm run build   # uncomment if you compile assets into /public
          fi

      # AWS creds (using long-lived keys like your example).
      # If you can, prefer OIDC in the future.
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} |
          docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY_URI }}

      # Build & tag image (Dockerfile should use Bref php-81-fpm like we discussed)
      - name: Build and tag Docker image
        run: |
          IMAGE_TAG=${{ secrets.ECR_REPOSITORY_URI }}:${{ github.sha }}
          docker build -t laravel-app .
          docker tag laravel-app:latest $IMAGE_TAG
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      # (Optional) Peek inside the built image to sanity-check paths
      - name: List files in container image
        run: |
          docker run --rm --entrypoint "" ${{ env.IMAGE_TAG }} ls -al /var/task

      - name: Push Docker image to ECR
        run: |
          docker push ${{ env.IMAGE_TAG }}

      #   Update the Lambda function to this new image
      - name: Update Lambda with new image
        run: |
          aws lambda update-function-code \
            --function-name ${{ secrets.LAMBDA_NAME }} \
            --image-uri       ${{ env.IMAGE_TAG }} \
            --region          ${{ secrets.AWS_REGION }} >/dev/null
          echo "Lambda updated."
          aws lambda wait function-updated --function-name ${{ secrets.LAMBDA_NAME }}

            # Optional: jq makes JSON checks easy
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      # Wait for API to be healthy (200 + {"ok":true})
      - name: Smoke test API health
        env:
          HEALTH_URL: https://akc2pwkx6a.execute-api.us-east-1.amazonaws.com/prod/v1/api/health/rds-tcp
        run: |
          echo "Checking $HEALTH_URL"
          # Try for ~150s total (30 * 5s). Tweak as needed.
          for i in {1..30}; do
            # capture body and status code
            RESP="$(curl -sS -m 8 -w '\n%{http_code}' "$HEALTH_URL")" || RESP=$'\n000'
            BODY="$(printf "%s" "$RESP" | head -n -1)"
            CODE="$(printf "%s" "$RESP" | tail -n1)"
            echo "Attempt $i: HTTP $CODE | $BODY"

            # health = HTTP 200 AND {"ok":true}
            if [ "$CODE" = "200" ] && echo "$BODY" | jq -e '.ok == true' >/dev/null 2>&1; then
              echo "✅ API health OK"
              exit 0
            fi

            sleep 5
          done

          echo "❌ API health check failed."
          exit 1

      # If health fails, print the last few minutes of Lambda logs to help debug
      - name: Tail Lambda logs on failure
        if: failure()
        run: |
          aws logs tail /aws/lambda/${{ secrets.LAMBDA_NAME }} \
            --since 10m --format short --region ${{ secrets.AWS_REGION }} || true

      - name: Notify deployment success
        run: echo "✅ Deployment to ECR successful!"
